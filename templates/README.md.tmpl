# Alfresco Docker Stack

> Generated by `alf-cli` for ACS {{ .Version }}

This stack spins up an Alfresco Content Services environment with your chosen options. Keep this README next to your `compose.yaml`.

## Quick start

```bash
# from this folder
docker compose up -d
docker compose ps
````

To watch logs:

```bash
docker compose logs -f --tail=200
```

To stop:

```bash
docker compose down
```

> **Tip:** First startup can take several minutes while images are pulled and indexes initialize.

## Selected configuration

* **ACS version:** `{{ .Version }}`
* **Protocol:** `{{ if .HTTPS }}https{{ else }}http{{ end }}`
* **Host:** `{{ if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}`
* **HTTP port:** `{{ .Port }}`
* **FTP:** `{{ if .UseFtp }}enabled (port 2121){{ else }}disabled{{ end }}`
* **Database:** `{{ if eq .Database "mariadb" }}MariaDB{{ else }}PostgreSQL{{ end }}`
* **Search (Solr)**
  * Cross-locale: `{{ if .IndexCrossLocale }}enabled{{ else }}disabled{{ end }}`
  * Content indexing: `{{ if .IndexContent }}enabled{{ else }}disabled{{ end }}`
  * Communication: `{{ .SolrComm }}`
* **Events (ActiveMQ):** `{{ if .UseActiveMQ }}external broker container{{ else }}embedded broker{{ end }}`
* **Add-ons:** {{ if .Addons }}{{- range $i, $a := .Addons -}}{{ if $i }}, {{ end }}{{ $a }}{{- end -}}{{ else }}none{{ end }}
* **Volumes:** {{ if .UseDockerVolume }}managed by Docker (named volumes){{ else }}bind mounts in the working directory{{ end }}

## Credentials

* **Repository (admin):** `admin` / *(password entered during generation)*

  > Change it after first login.

{{- if .UseActiveMQ }}
* **ActiveMQ:** user `{{ .AmqUser }}`, password `{{ .AmqPassword }}` (see `compose.yaml`)
{{- end }}

> Database credentials are defined in `compose.yaml` environment variables for the DB service.

## Endpoints

Base URL: `{{ if .HTTPS }}https{{ else }}http{{ end }}://{{ if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}:{{ .Port }}`

* **Alfresco Repository API:**
  * Repository: `{{ if .HTTPS }}https{{ else }}http{{ end }}://{{ if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}:{{ .Port }}/alfresco/`
* **Share UI:**
  `{{ if .HTTPS }}https{{ else }}http{{ end }}://{{ if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}:{{ .Port }}/share/`
* **Content App UI:**
  `{{ if .HTTPS }}https{{ else }}http{{ end }}://{{ if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}:{{ .Port }}/content-app/`
* **Admin UI:**
  `{{ if .HTTPS }}https{{ else }}http{{ end }}://{{ if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}:{{ .Port }}/admin/`

{{ if .UseFtp -}}
* **FTP:** `ftp://{{ if .FtpBindingIP }}{{ .FtpBindingIP }}{{ else if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}:2121`
{{- end }}

> **Solr:** by default not exposed outside the Docker network. Admin UI is reachable from inside the network at `http://solr6:8983/solr/`.

## How to run

1. **Start services**

   ```bash
   docker compose up -d
   ```
2. **Wait until Repository is live**

   ```bash
   curl -sf {{ if .HTTPS }}"https"{{ else }}"http"{{ end }}"://{{ if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}:{{ .Port }}/alfresco/api/-default-/public/alfresco/versions/1/probes/-live- && echo "Repository is live"
   ```
3. **Log in to Share** at
   `{{ if .HTTPS }}https{{ else }}http{{ end }}://{{ if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}:{{ .Port }}/share/`
   with `admin` / *(your password)*.

## How to test (start with the Repository)

### 1) Verify discovery

```bash
curl -u admin:YOUR_PASSWORD \
  {{ if .HTTPS }}https{{ else }}http{{ end }}://{{ if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}:{{ .Port }}/alfresco/api/-default-/public/alfresco/versions/1/discovery | jq .
```

### 2) Upload a document

```bash
curl -u admin:YOUR_PASSWORD -F filedata=@README.md \
  -F name="readme.md" -F nodeType="cm:content" \
  {{ if .HTTPS }}https{{ else }}http{{ end }}://{{ if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}:{{ .Port }}/alfresco/api/-default-/public/alfresco/versions/1/nodes/-my-/children
```

{{ if .IndexContent -}}

### 3) Full-text search (wait a few seconds for indexing)

Create `search.json`:

```json
{
  "query": { "query": "name:readme OR text:readme" },
  "paging": { "maxItems": 10, "skipCount": 0 }
}
```

Run:

```bash
curl -u admin:YOUR_PASSWORD -H "Content-Type: application/json" -d @search.json \
  {{ if .HTTPS }}https{{ else }}http{{ end }}://{{ if .UseBinding }}{{ .BindingIP }}{{ else }}{{ .Server }}{{ end }}:{{ .Port }}/alfresco/api/-default-/public/search/versions/1/search | jq .
```

{{- end }}

{{ if .IndexCrossLocale -}}

> Cross-locale search is **enabled**. Mixed-language content will be tokenized accordingly.
> {{- end }}

## Add-ons

{{ if .Addons }}
The following add-ons are preloaded and built into the images:

{{ range .Addons -}}

* {{ . }}
  {{ end }}
  {{ else }}
  No add-ons selected.
  {{ end }}

To add/remove add-ons later, place AMP/JARs in the corresponding `alfresco/modules` or `share/modules` folders and rebuild:

```bash
docker compose build --no-cache alfresco share
docker compose up -d
```

## Database

* Engine: **{{ if eq .Database "mariadb" }}MariaDB (3306){{ else }}PostgreSQL (5432){{ end }}**
* Host (inside Docker network): `{{ if eq .Database "mariadb" }}mariadb{{ else }}postgres{{ end }}`
* Credentials: see `compose.yaml` environment of the DB service.

**CLI examples (from the host):**
{{ if eq .Database "mariadb" }}

```bash
docker compose exec mariadb mysql -u$MYSQL_USER -p$MYSQL_PASSWORD -e "SHOW DATABASES;"
```

{{ else }}

```bash
docker compose exec postgres psql -U $POSTGRES_USER -c '\l'
```

{{ end }}

## Events (ActiveMQ)

{{ if .UseActiveMQ -}}
An **external ActiveMQ** is included.

* Broker URL: `tcp://activemq:61616`
* Credentials: `{{ .AmqUser }}/{{ .AmqPassword }}` (also set in `compose.yaml`)

{{- else -}}
Using an **embedded broker** (no extra service exposed). No configuration needed.
{{- end }}

## HTTPS

{{ if .HTTPS -}}
HTTPS is **enabled** at the base URL above. If using self-signed certs, import the CA into your browser/Java truststore as needed.
{{- else -}}
HTTPS is **disabled**. To enable later, re-run the generator with HTTPS enabled or adapt `config/nginx.conf` and expose 443 in `compose.yaml`.
{{- end }}

## Maintenance

* **Update images**

  ```bash
  docker compose pull
  docker compose up -d
  ```

* **Backups**
  {{ if .UseDockerVolume -}}
  Use volume snapshots or tar the named volumes:

  ```bash
  docker run --rm -v <VOLUME_NAME>:/data -v "$PWD":/backup alpine tar czf /backup/<VOLUME_NAME>.tgz -C / data
  ```

  {{- else -}}
  Your data lives in bind-mounted folders under this directory. Stop services and archive those folders.
  {{- end }}

* **Reset the stack (DANGER)**

  ```bash
  docker compose down -v
  ```

## Troubleshooting

* **Ports in use:** change `{{ .Port }}` in `compose.yaml`.
* **Low memory/CPU:** increase Docker resources; first startup is heavier due to indexing.
* **Search returns no results yet:** wait for indexing to complete, then retry.
* **Database connection issues:** ensure the DB container is healthy (`docker compose ps`), check env vars.

---

*For more info, visit [alf-cli](https://github.com/aborroy/alf-cli).*